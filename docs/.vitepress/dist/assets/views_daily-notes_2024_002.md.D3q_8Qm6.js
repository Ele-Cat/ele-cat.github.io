import{$ as s,U as i,V as a,av as n,aH as l,aI as e,aJ as p}from"./chunks/framework.Dv0Ng7O-.js";const y=JSON.parse('{"title":"Github Actions 部署项目","description":"","frontmatter":{},"headers":[],"relativePath":"views/daily-notes/2024/002.md","filePath":"views/daily-notes/2024/002.md","lastUpdated":1715568646000}'),t={name:"views/daily-notes/2024/002.md"},h=n(`<h1 id="github-actions-部署项目" tabindex="-1">Github Actions 部署项目 <a class="header-anchor" href="#github-actions-部署项目" aria-label="Permalink to &quot;Github Actions 部署项目&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>GitHub Actions 是一个持续集成和持续交付（CI/CD）平台，可以执行自动化构建和部署。通过创建工作流，方便的将项目部署到生产中。</p><p>本教程将从<a href="#_1-纯静态文件部署"><strong>纯静态文件部署</strong></a>、<a href="#_2-项目打包文件部署"><strong>项目打包文件部署</strong></a>、<a href="#_3-sh-脚本项目部署"><strong>sh 脚本项目部署</strong></a>、<a href="#_4-全自动项目部署"><strong>全自动项目部署</strong></a>几个方面实现 Github Actions 自动部署项目。</p><div class="danger custom-block"><p class="custom-block-title">重要提示</p><p>本教程中的示例项目代码拉取下来后，请将项目推送到自己的 GitHub 仓库中，以便后续操作步骤能够成功运行。如果是已有项目，请酌情执行部署步骤！</p></div><h2 id="_1-纯静态文件部署" tabindex="-1">1.纯静态文件部署 <a class="header-anchor" href="#_1-纯静态文件部署" aria-label="Permalink to &quot;1.纯静态文件部署&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">引子</p><p>纯静态文件部署常用在<strong>纯 html 页面且无需编译打包的项目</strong>中，入口 <code>index.html</code> 文件在项目根目录，克隆<a href="https://github.com/Ele-Cat/test-static-pages" target="_blank" rel="noreferrer">Github 示例项目</a>。</p></div><ol><li>项目结构</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>|- test-static-pages</span></span>
<span class="line"><span>  - index.css</span></span>
<span class="line"><span>  - index.html</span></span>
<span class="line"><span>  - index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li><p>项目代码</p><ul><li><p>index.html</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;测试静态文件部署&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    测试静态文件部署</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>index.js</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试静态文件部署&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>index.css</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><p>配置 Actions：</p><ul><li>克隆并推送<a href="https://github.com/Ele-Cat/test-static-pages" target="_blank" rel="noreferrer">项目</a>到自己的 GitHub 仓库中；</li><li>打开项目：Settings -&gt; Pages；</li><li>Source 默认选择 <code>Deploy from a branch</code>；</li><li>Branch 分支选择 <code>master</code> 分支【默认分支名称在<a href="https://github.com/settings/repositories" target="_blank" rel="noreferrer">此处</a>修改】；</li><li>Select folder 默认选择 <code>/(root)</code>；</li><li>点击 Save 后，项目会自动部署到 GitHub Pages 上，<a href="https://ele-cat.github.io/test-static-pages/" target="_blank" rel="noreferrer">访问示例项目</a>；</li><li>操作步骤如下图：</li></ul><p><img src="`+l+`" alt="配置 actions" data-zoomable="" loading="lazy"></p></li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>只要在 <code>master</code> 分支上推送代码，都会自动部署项目。因此可以另起一个 <code>develop</code> 分支去写开发内容，有需要部署时，将 <code>develop</code> 分支合并到 <code>master</code> 分支，合并成功后依然会自动部署 <code>master</code> 分支。</li><li>可以在项目的 <code>Actions</code> 页面查看部署日志，观察部署过程。</li></ol></div><h2 id="_2-项目打包文件部署" tabindex="-1">2.项目打包文件部署 <a class="header-anchor" href="#_2-项目打包文件部署" aria-label="Permalink to &quot;2.项目打包文件部署&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">引子</p><p>上小节实现了纯静态页面的自动部署，但对于需要编译打包的项目来说，打包好的文件会在 <code>dist</code> 目录下，很明显上小节 <code>Select folder</code> 时没有 <code>/dist</code> 选项【<em>PS：当然把项目打包目录设定为 /docs 去部署也可以</em>】，这就需要用到 <code>Actions</code> 里的 <code>yml</code> 配置。</p><p>项目打包文件部署，常用在 <code>dist</code> 文件在本地打包好，提交到 GitHub 上，然后部署的场景中，克隆<a href="https://github.com/Ele-Cat/test-dist-pages" target="_blank" rel="noreferrer">Github 示例项目</a>，本节所用示例为 vite+vue3 项目，其他框架逻辑一致。</p></div><ol><li><p>克隆项目【在已有项目中直接跳到第 3 步】：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Ele-Cat/test-dist-pages.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>安装依赖&amp;打包</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>推送项目到自己的 GitHub 仓库中，注意此时会将 <code>dist</code> 目录也提交上去【<code>.gitignore</code>文件不忽略<code>dist</code>目录】</p></li><li><p>配置 Actions:</p><ul><li><p>打开项目：Settings -&gt; Pages；</p></li><li><p>Source 选择 <code>GitHub Actions</code>；</p></li><li><p>workflow 选择 <code>Static HTML</code> → <code>Configure</code>，会跳转到 <code>*/.github/workflows/static.yml</code> 编辑页；</p></li><li><p>修改 <code>static.yml</code>：</p><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Simple workflow for deploying static content to GitHub Pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这行代码设置了工作流程的名称为 &quot;Deploy static content to Pages&quot;。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy static content to Pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这部分定义了触发工作流程执行的事件。它指定当代码推送到名为 &quot;master&quot; 的分支时触发工作流程执行，并且还可以通过 GitHub Actions 界面手动触发工作流程。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;master&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这部分设置了 GITHUB_TOKEN 的权限，以允许对 GitHub Pages 进行部署。它指定 GITHUB_TOKEN 具有读取仓库内容、写入页面和写入身份令牌的权限。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">read</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  id-token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这部分定义了并发性设置。它指定一个名为 &quot;pages&quot; 的组，用于限制只能有一个并发的页面部署任务运行，同时取消排队中的运行。但不会取消正在进行中的运行，以确保生产部署完成。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">concurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cancel-in-progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这部分定义了一个名为 &quot;deploy&quot; 的任务(job)。该任务在 Ubuntu 最新版本上运行。它包含一系列步骤以执行静态内容的部署过程，具体步骤包括：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Checkout 步骤使用 actions/checkout 动作来获取代码库。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Setup Pages 步骤使用 actions/configure-pages 动作进行页面配置。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Upload artifact 步骤使用 actions/upload-pages-artifact 动作将 &quot;./dist&quot; 目录下的文件上传到 GitHub Pages 所需的存储库。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Deploy to GitHub Pages 步骤使用 actions/deploy-pages 动作执行实际的 GitHub Pages 部署操作，并将操作结果保存在 deployment 变量中，可以通过 \${{steps.deployment.outputs.page_url }} 访问部署后的页面 URL。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github-pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ steps.deployment.outputs.page_url }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/configure-pages@v5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Upload artifact</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/upload-pages-artifact@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # Upload entire repository</span></span>
<span class="line diff remove"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/deploy-pages@v4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div></li><li><p>点击右上角的 <code>Commit changes</code> 后，再点击弹窗的 <code>Commit changes</code>，项目会自动部署到 GitHub Pages 上，<a href="https://ele-cat.github.io/test-dist-pages/" target="_blank" rel="noreferrer">访问示例项目</a>；</p></li><li><p>操作步骤如下图： <img src="`+e+`" alt="配置 actions" data-zoomable="" loading="lazy"></p></li></ul></li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>与上小节一样，在推送 <code>master</code> 分支推送任意代码，后续无需任何配置，都会自动触发部署 <code>dist</code>。</li><li>本节案例场景多<strong>用在项目所需依赖为私有部署</strong>，在 GitHub 中无法自动 <code>install&amp;build</code>；如果项目所需依赖可在 GitHub 上完成，更推荐用<a href="#_4-全自动项目部署">全自动项目部署</a>的操作。</li></ol></div><h2 id="_3-sh-脚本项目部署" tabindex="-1">3.sh 脚本项目部署 <a class="header-anchor" href="#_3-sh-脚本项目部署" aria-label="Permalink to &quot;3.sh 脚本项目部署&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">引子</p><blockquote><p>上小节中实现的项目部署较为繁琐：</p><ol><li>开发完成后本地 build；</li><li>build 后提交文件到 GitHub；</li><li>等待 GitHub Actions 部署。</li></ol></blockquote><blockquote><p>本节通过 <code>sh</code> 脚本，来实现：</p><ol><li>项目自动打包并推送 <code>dist</code> 到对应分支;</li><li>自动部署。</li></ol></blockquote><p>虽然只缩减了一小步，但也是大进步 🎉！克隆<a href="https://github.com/Ele-Cat/test-sh-pages" target="_blank" rel="noreferrer">Github 示例项目</a>，本节所用示例为 vite+vue3 项目，其他框架逻辑一致。</p></div><ol><li><p>克隆项目【在已有项目中直接跳到第 4 步】：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Ele-Cat/test-sh-pages.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>安装依赖</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>推送项目到自己的 GitHub 仓库中</p></li><li><p>修改项目根目录 <code>deploy.sh</code> 文件的第 <code>21</code> 行代码：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这里是为了看错误日志</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入打包后的文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化一个 Git 仓库，如果在 dist 目录中还没有 Git 仓库的话。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加所有更改过的文件到暂存区。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交暂存区的所有更改，并附上一个提交信息。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;🚀自动部署&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将当前分支强制推送到 GitHub 上的指定分支。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -f 选项表示强制推送，它会覆盖远程分支上的任何更改。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的 master:sh-pages 表示将本地的 master 分支推送到远程的 sh-pages 分支。</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Ele-Cat/test-sh-pages.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master:sh-pages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>请将<code>https://github.com/Ele-Cat/test-sh-pages.git</code>仓库地址修改为自己的仓库地址，<code>master:sh-pages</code>分支信息修改为自己仓库对应的目标分支。</p></blockquote></li><li><p>在项目根目录运行命令：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>在 Windows 电脑 的 VSCode 命令行工具中运行 <code>sh deploy.sh</code>，可能会报 <s>sh : 无法将“sh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。</s> 解决办法：在 <code>Git Bash</code> 中运行脚本命令。</p></blockquote></li><li><p>等待脚本运行完成，可以在项目仓库中看到新的 <code>sh-pages</code> 分支。</p></li><li><p>配置 Actions：</p><ul><li>打开项目：Settings -&gt; Pages；</li><li>Source 默认选择 <code>Deploy from a branch</code>；</li><li>Branch 分支选择 <code>sh-pages</code> 分支【注意这里的<code>sh-pages</code>分支为第四步推送的分支名称】；</li><li>Select folder 默认选择 <code>/(root)</code>；</li><li>点击 Save 后，项目会自动部署到 GitHub Pages 上，<a href="https://ele-cat.github.io/test-sh-pages/" target="_blank" rel="noreferrer">访问示例项目</a>；</li><li>操作步骤图参考第一小节。</li></ul></li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>本小节部署方式最为灵活，在非 <code>sh-pages</code> 分支提交代码时，不会触发执行项目部署；在需要项目部署时，运行 <code>sh deploy.sh</code> 脚本，即可实现自动部署。</li><li>但是通过 sh 脚本打包、推送、部署，还是需要开发者手动运行命令触发，并非全自动。下小节将介绍如何实现代码提交即触发全自动部署。</li></ol></div><h2 id="_4-全自动项目部署" tabindex="-1">4.全自动项目部署 <a class="header-anchor" href="#_4-全自动项目部署" aria-label="Permalink to &quot;4.全自动项目部署&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">引子</p><p>回归“前言”，GitHub Actions 是一个持续集成和持续交付（CI/CD）平台，可以执行自动化构建和部署。我们完全可以通过 Actions 实现<strong>代码提交即触发全自动部署</strong>，即安装、打包、部署都在 Actions 中完成。</p></div><details class="details custom-block"><summary>一些基础概念</summary><ol><li><p>CICD（持续构建、持续交付）</p><p><strong>① CI 持续集成（Continuous Integration）</strong></p><p>持续集成：频繁的将代码合并到主分支中，强调通过集成测试反馈给开发一个结果，不管失败还是成功。</p><p>持续集成分成三个阶段：</p><ul><li>持续集成准备阶段：根据软件开发的需要，准备 CI 的一些前置工作 <ul><li>集成 CI 工具的代码仓库（Gitlab、Github、Jenkins 等）</li><li>单元测试或者集成测试的脚本</li><li>触发 CI 的配置文件，实现各种功能的 Jobs</li></ul></li><li>持续集成进行阶段 <ul><li>推送代码出发 CI 系统</li><li>通过 CI 系统监听代码的测试、构建，反馈集成结果</li><li>通过版本管理系统实现版本的管理</li></ul></li><li>接续集成完成阶段：反馈集成结果</li></ul><p><strong>② CD 持续交付（Continuous Delivery）</strong></p><p>持续交付：主要面向测试人员和产品，可以保证一键部署，常常要交付的内容包括</p><ul><li>源代码：缺点，代码依赖的环境不容易控制</li><li>打包的二进制文件或者系统包：存在兼容性问题和环境差异出现的部署失败</li><li>虚拟机镜像交付：系统隔离最好，但占用系统资源严重</li><li>Docker 交付：容器交付，成本最低，兼容性最好</li></ul><p>持续部署：此时要提供一个稳定的版本，包括所需的环境和依赖，主要面向用户提供服务，发生错误要能快速回滚。</p><p>CICD 是目前大多数互联网公司选择的一种部署方案，因为它能够灵活配置项目部署过程中的各个阶段。</p></li><li><p>Workflows（工作流）</p><p>工作流是一个可配置的自动化的程序。创建一个工作流，你需要定义一个 YAML 文件，当你的仓库触发某个事件的时候，工作流就会运行，当然也可以手动触发，或者定义一个时间表。一个仓库可以创建多个工作流，每一个工作流都可以执行不同的步骤。</p><ul><li><p>Events(事件)</p><p>事件是指仓库触发运行工作流的具体的行为，比如创建一个 <code>pull request</code>、新建一个 <code>issue</code>、或者推送一个 <code>commit</code>。你也可以使用时间表触发一个工作流，或者通过请求一个 REST API，再或者手动触发。</p></li><li><p>Jobs(任务)</p><p>任务是在同一个运行器上执行的一组步骤。一个步骤要么是一个 shell 脚本要么是一个动作。步骤会顺序执行，并彼此独立。因为每一个步骤都在同一个运行器上被执行，所以你可以从一个步骤传递数据到另一个步骤 。</p><p>你可以配置一个任务依赖其他任务，默认情况下，任务没有依赖，并行执行。当一个任务需要另外一个任务的时候，它会等到依赖的任务完成再执行。</p></li><li><p>Actions(动作)</p><p>动作是 GitHub Actions 平台的一个自定义的应用，它会执行一个复杂但是需要频繁重复的作业。使用动作可以减少重复代码。比如一个 action 可以实现从 GitHub 拉取你的 git 仓库，为你的构建环境创建合适的工具链等。你可以写自己的动作 ，或者在 GitHub 市场找已经实现好的动作。</p></li><li><p>Runners(运行器)</p><p>一个运行器是一个可以运行工作流的服务。每一个运行器一次只运行一个单独的任务。GitHub 提供 Ubuntu Linux，Microsoft Windows 和 macOS 运行器，每一个工作流都运行在一个独立新建的虚拟机中。如果你需要一个不同的操作系统，你可以自定义运行器。</p></li></ul></li></ol></details><ol><li><p>克隆项目【在已有项目中直接跳到第 2 步】：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Ele-Cat/test-auto-pages.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>推送项目到自己的 GitHub 仓库中</p><ul><li><p>如果用的是克隆项目，直接推送即可</p></li><li><p>如果是自己的全新项目，在项目根目录新增 <code>.github/workflows/auto-deploy.yml</code>文件：</p><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .github/workflows/auto-deploy.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">auto deploy 🚀</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 监听push操作</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这里只配置了master分支，所以只有推送master分支才会触发以下任务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pull_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这个选项可以使你手动在 Action tab 页面触发工作流</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 允许对仓库的内容进行写操作。包括创建、修改和删除文件、目录以及提交更改等</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这里只配置了push，所以只有推送master分支才会触发以下任务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 允许管理 GitHub Pages 服务并对其进行写操作</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 任务ID</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build-and-deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 运行环境</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    concurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ github.workflow }}-\${{ github.ref }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 步骤</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 官方action，将代码拉取到虚拟机</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 打包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build application 🔧</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 部署</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy 🚀</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">JamesIves/github-pages-deploy-action@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github.ref == &#39;refs/heads/master&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.PAT }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gh-pages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # default: gh-pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          folder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Automatically remove deleted files from the deploy branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>首次推送代码后，会执行一次自动部署且报错，不用担心，这是因为 GitHub Actions 会监听 <code>.github/workflows</code> 目录的 <code>.yml</code> 文件，我们在配置了令牌后，就可以成功执行 Actions 了。</p></div></li></ul></li><li><p>创建令牌</p><ul><li>打开 GitHub：右上角头像 -&gt; Settings【不是仓库的 Settings 哦！】；</li><li>左侧最下边的 Developer settings 进入；</li><li>展开 Personal access tokens -&gt; Fine-grained tokens【推荐使用这个，而不是 Tokens(classic)，查看<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens" target="_blank" rel="noreferrer">原因</a>】；</li><li>点击右上角的 Generate new token 按钮，进入配置界面； <img src="`+p+'" alt="Fine-grained tokens" data-zoomable="" loading="lazy"></li><li>填写 Token name 为 <code>generate for test auto pages</code>，这个令牌名称不可以跟其他令牌的名称重复；</li><li>选择 Expiration，最多可以选择一年；</li><li>Repository access 选择 <code>Only select repositories</code>，然后选择需要自动部署的项目仓库；</li><li>将 Permissions 中 Repository permissions 的全部选择都选择 <code>Read and write</code>，没有该选项的就选择 <code>Read-only</code>；</li><li>点击 Generate token 按钮，会显示一个令牌，复制这个令牌保存好，后续需要用到【如果忘记了令牌，可以在令牌详情重新生成一个，不过用到该令牌的全部项目都需要同步更新】。</li></ul></li><li><p>将令牌应用在仓库中</p><ul><li>回到仓库中：Settings -&gt; Security；</li><li>展开 Secrets and variables，打开 Actions；</li><li>在 Repository secrets 处绑定令牌，点击 <code>New repository secret</code> 按钮；</li><li>在 <code>Name</code> 填写 <code>PAT</code>【这个变量名在第 2 步的 <code>auto-deploy.yml</code> 文件中可自定义】；</li><li>在 <code>Secret</code> 填写 上步创建的令牌；</li><li>点击 <code>Add secret</code> 按钮保存。</li></ul></li><li><p>运行 Actions：</p><ul><li>随便推送代码到 <code>master</code> 分支 或 手动运行一次 Actions，为的是让 Actions 再跑一次部署流程；</li><li>打开项目：顶部 Actions【可以看到有一条报错的部署信息，这就是上边说的，我们第 2 步时还没有配置令牌，所以报错了】；</li><li>点击这条报错 workflow run，进入后点击右上角的 <code>Re-run jobs</code> -&gt; <code>Re-run all jobs</code>；</li><li>这时候可以点击进入查看部署过程，等待 Complete job 后，我们可以看到仓库新增了一个 <code>gh-pages</code> 分支，且里边的内容就是我们打包后生成的 <code>dist</code> 文件夹内容；</li><li>这时候打开项目：Settings -&gt; Pages，就会发现 Build and deployment 已经自动将 <code>gh-pages</code> 分支部署好了，<a href="https://ele-cat.github.io/test-auto-pages/" target="_blank" rel="noreferrer">访问示例项目</a>；<div class="tip custom-block"><p class="custom-block-title">提示</p><p>以后每次推送 <code>master</code> 分支代码后，Actions 都会自动执行安装、打包、部署任务，将最新代码部署到 <code>gh-pages</code> 分支;</p></div></li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>使用 GitHub Actions 来部署项目，其实就是将打包好的代码【不管是本地打包还是通过 jobs 打包】，部署到仓库的对应分支，并启用 GitHub Pages；</li><li>教程里的 1、2、4 都是只要提交代码，就会执行部署；3 为运行 sh 脚本才部署；可以根据自己的实际需求选择部署方式；</li><li>大多数情况下，master 分支是受保护的，我们可以推送代码到开发分支，仅在部署时，合并代码到 master 分支，合并时自动部署；</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://docs.github.com/zh/actions/quickstart" target="_blank" rel="noreferrer">GitHub Actions 文档</a></li><li><a href="https://blog.csdn.net/iotjin/article/details/133128159" target="_blank" rel="noreferrer">vue3 - 前端 Vue 项目提交 GitHub 使用 Actions 自动化部署</a></li><li><a href="https://www.cnblogs.com/xueyubao/p/13991935.html" target="_blank" rel="noreferrer">使用 Github Actions 将 Vue 项目部署到 Github Pages</a></li><li><a href="https://blog.csdn.net/2302_77290281/article/details/133015530" target="_blank" rel="noreferrer">使用 Github Actions 自动部署 vue 项目</a></li></ul>',27),r=[h];function k(c,d,o,g,E,b){return i(),a("div",null,r)}const m=s(t,[["render",k]]);export{y as __pageData,m as default};
