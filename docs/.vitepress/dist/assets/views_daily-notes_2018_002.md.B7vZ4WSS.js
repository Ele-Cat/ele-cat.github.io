import{_ as o,c as e,o as c,at as l}from"./chunks/framework.mXguc-v6.js";const n=JSON.parse('{"title":"常用正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"views/daily-notes/2018/002.md","filePath":"views/daily-notes/2018/002.md","lastUpdated":1713625781000}'),i={name:"views/daily-notes/2018/002.md"};function t(a,d,$,u,X,q){return c(),e("div",null,d[0]||(d[0]=[l('<h1 id="常用正则表达式" tabindex="-1">常用正则表达式 <a class="header-anchor" href="#常用正则表达式" aria-label="Permalink to &quot;常用正则表达式&quot;">​</a></h1><h2 id="校验数字的表达式" tabindex="-1">校验数字的表达式 <a class="header-anchor" href="#校验数字的表达式" aria-label="Permalink to &quot;校验数字的表达式&quot;">​</a></h2><ul><li>数字：<code>^[0-9]\\*$</code></li><li>n 位的数字：<code>^\\d{n}$</code></li><li>至少 n 位的数字：<code>^\\d{n,}$</code></li><li>m-n 位的数字：<code>^\\d{m,n}$</code></li><li>零和非零开头的数字：<code>^(0|[1-9][0-9]\\*)$</code></li><li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]\\*)+(.[0-9]{1,2})?$</code></li><li>带 1-2 位小数的正数或负数：<code>^(-)?\\d+(.\\d{1,2})?$</code></li><li>正数、负数、和小数：<code>^(-|+)?\\d+(.\\d+)?$</code></li><li>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></li><li>有 1~3 位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></li><li>非零的正整数：<code>^[1-9]\\d$</code> 或 <code>^([1-9][0-9]){1,3}$</code> 或 <code>^+?[1-9][0-9]\\*$</code></li><li>非零的负整数：<code>^-[1-9][0-9]\\*$</code> 或 <code>^-[1-9]\\d$</code></li><li>非负整数：<code>^\\d+$</code> 或 <code>^[1-9]\\d\\*|0$</code></li><li>非正整数：<code>^-[1-9]\\d\\*|0$</code> 或 <code>^((-\\d+)|(0+))$</code></li><li>非负浮点数：<code>^\\d+(.\\d+)?$</code> 或 <code>^[1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0$</code></li><li>非正浮点数：<code>^((-\\d+(.\\d+)?)|(0+(.0+)?))$</code> 或 <code>^(-([1-9]\\d.\\d|0.\\d[1-9]\\d))|0?.0+|0$</code></li><li>正浮点数：<code>^[1-9]\\d.\\d|0.\\d[1-9]\\d$</code> 或 <code>^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></li><li>负浮点数：<code>^-([1-9]\\d.\\d|0.\\d[1-9]\\d)$</code> 或 <code>^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></li><li>浮点数：<code>^(-?\\d+)(.\\d+)?$</code> 或 <code>^-?([1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0)$</code></li></ul><h2 id="校验字符的表达式" tabindex="-1">校验字符的表达式 <a class="header-anchor" href="#校验字符的表达式" aria-label="Permalink to &quot;校验字符的表达式&quot;">​</a></h2><ul><li>汉字：<code>^[\\u4e00-\\u9fa5]{0,}$</code></li><li>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></li><li>长度为 3-20 的所有字符：<code>^.{3,20}$</code></li><li>由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li><li>由 26 个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li><li>由 26 个小写英文字母组成的字符串：<code>^[a-z]+$</code></li><li>由数字和 26 个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li><li>由数字、26 个英文字母或者下划线组成的字符串：<code>^\\w+$</code> 或 <code>^\\w{3,20}$</code></li><li>中文、英文、数字包括下划线：<code>^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</code></li><li>中文、英文、数字但不包括下划线等符号：<code>^[\\u4E00-\\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$</code></li><li>可以输入含有^%&amp;&#39;,;=?$&quot;等字符：<code>[^%&amp;&#39;,;=?$\\x22]+</code></li><li>禁止输入含有~的字符：<code>[^~\\x22]+</code></li></ul><h2 id="特殊需求表达式" tabindex="-1">特殊需求表达式 <a class="header-anchor" href="#特殊需求表达式" aria-label="Permalink to &quot;特殊需求表达式&quot;">​</a></h2><ul><li>Email 地址：<code>^\\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)\\*$</code></li><li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li><li>InternetURL：<code>[a-zA-z]+://[^\\s]</code> 或 <code>^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=])?$</code></li><li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</code></li><li>电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：<code>^((\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$</code></li><li>国内电话号码(0511-4405222、021-87888822)：<code>\\d{3}-\\d{8}|\\d{4}-\\d{7}</code></li><li>身份证号(15 位、18 位数字)：<code>^\\d{15}|\\d{18}$</code></li><li>短身份证号码(数字、字母 x 结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></li><li>帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li><li>密码(以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\\w{5,17}$</code></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<code>^(?=.\\d)(?=.[a-z])(?=.\\*[A-Z]).{8,10}$</code></li><li>日期格式：<code>^\\d{4}-\\d{1,2}-\\d{1,2}</code></li><li>一年的 12 个月(01 ～ 09 和 1 ～ 12)：<code>^(0?[1-9]|1[0-2])$</code></li><li>一个月的 31 天(01 ～ 09 和 1 ～ 31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li><li>有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：<code>^[1-9][0-9]\\*$</code></li><li>这表示任意一个不以 0 开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]\\*)$</code></li><li>一个 0 或者一个不以 0 开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]\\*)$</code></li><li>这表示一个 0 或者一个可能为负的开头不为 0 的数字.让用户以 0 开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li><li>必须说明的是,小数点后面至少应该有 1 位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})\\*(.[0-9]{1,2})?$</code></li><li>1 到 3 个数字,后面跟着任意个 逗号+3 个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})\\*)(.[0-9]{1,2})?$</code></li><li>备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li><li>xml 文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li><li>中文字符的正则表达式：<code>[\\u4e00-\\u9fa5]</code></li><li>双字节字符：<code>[^\\x00-\\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计 2，ASCII 字符计 1))</li><li>空白行的正则表达式：<code>\\n\\s\\*\\r</code> (可以用来删除空白行)</li><li>HTML 标记的正则表达式：<code>&lt;(\\S?)[^&gt;]&gt;.?&lt;/\\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li><li>首尾空白字符的正则表达式：<code>^\\s|\\s$ 或 (^\\s)|(\\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯 QQ 号：<code>[1-9][0-9]{4,}</code> (腾讯 QQ 号从 10000 开始)</li><li>中国邮政编码：<code>[1-9]\\d{5}(?!\\d)</code> (中国邮政编码为 6 位数字)</li><li>IP 地址：<code>\\d+.\\d+.\\d+.\\d+</code> (提取 IP 地址时有用)</li><li>IP 地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li></ul>',7)]))}const s=o(i,[["render",t]]);export{n as __pageData,s as default};
