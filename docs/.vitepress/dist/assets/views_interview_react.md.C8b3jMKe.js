import{_ as i,c as a,o as n,at as l}from"./chunks/framework.mXguc-v6.js";const c=JSON.parse('{"title":"React 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"views/interview/react.md","filePath":"views/interview/react.md","lastUpdated":1747020550000}'),e={name:"views/interview/react.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="react-面试题" tabindex="-1">React 面试题 <a class="header-anchor" href="#react-面试题" aria-label="Permalink to &quot;React 面试题&quot;">​</a></h1><h2 id="_1、什么是-jsx" tabindex="-1">1、什么是 JSX <a class="header-anchor" href="#_1、什么是-jsx" aria-label="Permalink to &quot;1、什么是 JSX&quot;">​</a></h2><p>JSX 是 JavaScript XML 的缩写，是一种 JavaScript 的语法扩展，主要用于 React 框架中描述用户界面。</p><h3 id="_1、jsx-的核心概念" tabindex="-1">1、JSX 的核心概念 <a class="header-anchor" href="#_1、jsx-的核心概念" aria-label="Permalink to &quot;1、JSX 的核心概念&quot;">​</a></h3><ol><li><p><strong>类似 HTML 的语法</strong>：JSX 允许你在 JavaScript 代码中编写类似 HTML 的标记，使 UI 组件的结构更直观。</p></li><li><p><strong>不是字符串也不是 HTML</strong>：JSX 最终会被编译为普通的 JavaScript 函数调用（通常是 <code>React.createElement()</code>）。</p></li><li><p><strong>表达式嵌入</strong>：可以在 JSX 中使用花括号 <code>{}</code> 嵌入任何有效的 JavaScript 表达式。</p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.props;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{props.url}&gt;{props.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2、jsx-的特点" tabindex="-1">2、JSX 的特点 <a class="header-anchor" href="#_2、jsx-的特点" aria-label="Permalink to &quot;2、JSX 的特点&quot;">​</a></h3><ul><li><strong>声明式</strong>：描述 UI 应该是什么样子，而不是如何构建它</li><li><strong>组件化</strong>：可以创建可复用的 UI 组件</li><li><strong>类型安全</strong>：与 TypeScript 配合良好，提供更好的类型检查</li></ul><h3 id="_3、jsx-编译示例" tabindex="-1">3、JSX 编译示例 <a class="header-anchor" href="#_3、jsx-编译示例" aria-label="Permalink to &quot;3、JSX 编译示例&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSX 代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译后的 JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {className: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;greeting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Hello, world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4、jsx-的注意事项" tabindex="-1">4、JSX 的注意事项 <a class="header-anchor" href="#_4、jsx-的注意事项" aria-label="Permalink to &quot;4、JSX 的注意事项&quot;">​</a></h3><ol><li><p><strong>必须有一个根元素</strong>：JSX 表达式必须有一个父元素，或者使用 Fragment (<code>&lt;&gt;&lt;/&gt;</code>)</p></li><li><p><strong>属性命名</strong>：使用 camelCase 命名属性（如 <code>className</code> 而不是 <code>class</code>）</p></li><li><p><strong>闭合标签</strong>：所有标签必须显式闭合（如 <code>&lt;img /&gt;</code>）</p></li><li><p><strong>防止注入攻击</strong>：React DOM 在渲染前会转义 JSX 中的值，防止 XSS 攻击</p></li></ol><p>JSX 使 React 组件的编写更加直观和高效，是 React 开发中的核心概念之一。</p><h2 id="_2、react-的生命周期方法" tabindex="-1">2、React 的生命周期方法 <a class="header-anchor" href="#_2、react-的生命周期方法" aria-label="Permalink to &quot;2、React 的生命周期方法&quot;">​</a></h2><p>React 组件的生命周期可以分为三个主要阶段：<strong>挂载阶段（Mounting）</strong>、<strong>更新阶段（Updating）</strong> 和 <strong>卸载阶段（Unmounting）</strong>。以下是类组件的主要生命周期方法：</p><h3 id="_1、-挂载阶段-mounting" tabindex="-1">1、 挂载阶段（Mounting） <a class="header-anchor" href="#_1、-挂载阶段-mounting" aria-label="Permalink to &quot;1、 挂载阶段（Mounting）&quot;">​</a></h3><ul><li><p><strong><code>constructor(props)</code></strong><br> 组件初始化时调用，用于设置初始 state 和绑定方法</p></li><li><p><strong><code>static getDerivedStateFromProps(props, state)</code></strong><br> 在渲染前调用，用于 state 依赖于 props 的情况</p></li><li><p><strong><code>render()</code></strong><br> 必须实现的方法，返回 JSX 或 null</p></li><li><p><strong><code>componentDidMount()</code></strong><br> 组件挂载到 DOM 后调用，适合进行网络请求、DOM 操作等</p></li></ul><h3 id="_2、-更新阶段-updating" tabindex="-1">2、 更新阶段（Updating） <a class="header-anchor" href="#_2、-更新阶段-updating" aria-label="Permalink to &quot;2、 更新阶段（Updating）&quot;">​</a></h3><ul><li><p><strong><code>static getDerivedStateFromProps(props, state)</code></strong><br> 在 props 或 state 变化时调用</p></li><li><p><strong><code>shouldComponentUpdate(nextProps, nextState)</code></strong><br> 决定组件是否需要重新渲染，可用于性能优化</p></li><li><p><strong><code>render()</code></strong><br> 重新渲染组件</p></li><li><p><strong><code>getSnapshotBeforeUpdate(prevProps, prevState)</code></strong><br> 在 DOM 更新前调用，可以获取 DOM 更新前的信息</p></li><li><p><strong><code>componentDidUpdate(prevProps, prevState, snapshot)</code></strong><br> 组件更新后调用，适合进行 DOM 操作或网络请求</p></li></ul><h3 id="_3、-卸载阶段-unmounting" tabindex="-1">3、 卸载阶段（Unmounting) <a class="header-anchor" href="#_3、-卸载阶段-unmounting" aria-label="Permalink to &quot;3、 卸载阶段（Unmounting)&quot;">​</a></h3><ul><li><strong><code>componentWillUnmount()</code></strong><br> 组件卸载前调用，用于清理定时器、取消网络请求等</li></ul><h3 id="_4、-错误处理" tabindex="-1">4、 错误处理 <a class="header-anchor" href="#_4、-错误处理" aria-label="Permalink to &quot;4、 错误处理&quot;">​</a></h3><ul><li><p><strong><code>static getDerivedStateFromError(error)</code></strong><br> 子组件抛出错误时调用，用于渲染备用 UI</p></li><li><p><strong><code>componentDidCatch(error, info)</code></strong><br> 子组件抛出错误时调用，用于记录错误信息</p></li></ul><h3 id="生命周期图示" tabindex="-1">生命周期图示 <a class="header-anchor" href="#生命周期图示" aria-label="Permalink to &quot;生命周期图示&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Mounting:</span></span>
<span class="line"><span>constructor → getDerivedStateFromProps → render → componentDidMount</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Updating:</span></span>
<span class="line"><span>getDerivedStateFromProps → shouldComponentUpdate → render → getSnapshotBeforeUpdate → componentDidUpdate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Unmounting:</span></span>
<span class="line"><span>componentWillUnmount</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p><strong>注意</strong>：React 16.3+ 引入了一些新的生命周期方法，并标记了一些旧方法为不推荐使用（如 <code>componentWillMount</code>, <code>componentWillReceiveProps</code>, <code>componentWillUpdate</code>）。在函数式组件中，可以使用 <code>useEffect</code> Hook 来模拟生命周期行为。</p></blockquote><h2 id="_3、react-hooks-详解" tabindex="-1">3、React Hooks 详解 <a class="header-anchor" href="#_3、react-hooks-详解" aria-label="Permalink to &quot;3、React Hooks 详解&quot;">​</a></h2><p>Hooks 是 React 16.8 引入的重大特性，它允许你在函数组件中使用 state 和其他 React 特性，而无需编写 class。</p><h3 id="核心-hooks" tabindex="-1">核心 Hooks <a class="header-anchor" href="#核心-hooks" aria-label="Permalink to &quot;核心 Hooks&quot;">​</a></h3><h4 id="_1-usestate" tabindex="-1">1. useState <a class="header-anchor" href="#_1-usestate" aria-label="Permalink to &quot;1. useState&quot;">​</a></h4><p>用于在函数组件中添加局部 state。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialState);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特点</strong>：</p><ul><li>返回当前 state 和更新 state 的函数</li><li>初始 state 只在第一次渲染时使用</li><li>可以多次调用 useState 来声明多个 state 变量</li></ul><h4 id="_2-useeffect" tabindex="-1">2. useEffect <a class="header-anchor" href="#_2-useeffect" aria-label="Permalink to &quot;2. useEffect&quot;">​</a></h4><p>用于处理副作用操作（数据获取、订阅、手动修改 DOM 等）。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 副作用逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 清理函数（可选）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, [dependencies]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>执行时机</strong>：</p><ul><li>无依赖数组：每次渲染后都执行</li><li>空依赖数组 <code>[]</code>：仅在组件挂载和卸载时执行</li><li>有依赖项：依赖项变化时执行</li></ul><h4 id="_3-usecontext" tabindex="-1">3. useContext <a class="header-anchor" href="#_3-usecontext" aria-label="Permalink to &quot;3. useContext&quot;">​</a></h4><p>用于订阅 React 的 Context 对象。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContext);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="额外-hooks" tabindex="-1">额外 Hooks <a class="header-anchor" href="#额外-hooks" aria-label="Permalink to &quot;额外 Hooks&quot;">​</a></h3><h3 id="_4-usereducer" tabindex="-1">4. useReducer <a class="header-anchor" href="#_4-usereducer" aria-label="Permalink to &quot;4. useReducer&quot;">​</a></h3><p>useState 的替代方案，适合复杂 state 逻辑。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reducer, initialArg, init);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_5-usecallback" tabindex="-1">5. useCallback <a class="header-anchor" href="#_5-usecallback" aria-label="Permalink to &quot;5. useCallback&quot;">​</a></h4><p>返回一个 memoized 回调函数。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memoizedCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [a, b], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_6-usememo" tabindex="-1">6. useMemo <a class="header-anchor" href="#_6-usememo" aria-label="Permalink to &quot;6. useMemo&quot;">​</a></h4><p>返回一个 memoized 值。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memoizedValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useMemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeExpensiveValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b), [a, b]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_7-useref" tabindex="-1">7. useRef <a class="header-anchor" href="#_7-useref" aria-label="Permalink to &quot;7. useRef&quot;">​</a></h4><p>返回一个可变的 ref 对象。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> refContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialValue);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>用途</strong>：</p><ul><li>访问 DOM 节点</li><li>保存可变值（不会触发重新渲染）</li></ul><h4 id="_8-useimperativehandle" tabindex="-1">8. useImperativeHandle <a class="header-anchor" href="#_8-useimperativehandle" aria-label="Permalink to &quot;8. useImperativeHandle&quot;">​</a></h4><p>自定义暴露给父组件的实例值。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useImperativeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ref, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_9-uselayouteffect" tabindex="-1">9. useLayoutEffect <a class="header-anchor" href="#_9-uselayouteffect" aria-label="Permalink to &quot;9. useLayoutEffect&quot;">​</a></h4><p>与 useEffect 相同，但在所有 DOM 变更后同步触发。</p><h4 id="_10-usedebugvalue" tabindex="-1">10. useDebugValue <a class="header-anchor" href="#_10-usedebugvalue" aria-label="Permalink to &quot;10. useDebugValue&quot;">​</a></h4><p>用于在 React 开发者工具中显示自定义 hook 的标签。</p><h3 id="hooks-规则" tabindex="-1">Hooks 规则 <a class="header-anchor" href="#hooks-规则" aria-label="Permalink to &quot;Hooks 规则&quot;">​</a></h3><ol><li><strong>只在最顶层调用 Hook</strong>：不要在循环、条件或嵌套函数中调用 Hook</li><li><strong>只在 React 函数组件或自定义 Hook 中调用 Hook</strong></li></ol><h3 id="自定义-hook" tabindex="-1">自定义 Hook <a class="header-anchor" href="#自定义-hook" aria-label="Permalink to &quot;自定义 Hook&quot;">​</a></h3><p>通过组合现有 Hook 可以创建自定义 Hook，用于共享组件间的状态逻辑。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFriendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">friendID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setIsOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 订阅好友状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 取消订阅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, [friendID]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOnline;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="hooks-优势" tabindex="-1">Hooks 优势 <a class="header-anchor" href="#hooks-优势" aria-label="Permalink to &quot;Hooks 优势&quot;">​</a></h3><ol><li><strong>简化组件逻辑</strong>：解决了 class 组件中生命周期函数经常包含不相关的逻辑的问题</li><li><strong>复用状态逻辑</strong>：无需修改组件结构就能复用状态逻辑</li><li><strong>更直观的代码</strong>：避免了 class 中的 this 绑定问题</li><li><strong>更小的打包体积</strong>：函数组件比 class 组件更轻量</li></ol><p>Hooks 代表了 React 的未来发展方向，官方推荐在新代码中使用函数组件和 Hooks。</p><h2 id="_4、react和vue-js的相似性和差异性是什么" tabindex="-1">4、React和Vue.js的相似性和差异性是什么 <a class="header-anchor" href="#_4、react和vue-js的相似性和差异性是什么" aria-label="Permalink to &quot;4、React和Vue.js的相似性和差异性是什么&quot;">​</a></h2><h1 id="react-和-vue-js-的相似性与差异性" tabindex="-1">React 和 Vue.js 的相似性与差异性 <a class="header-anchor" href="#react-和-vue-js-的相似性与差异性" aria-label="Permalink to &quot;React 和 Vue.js 的相似性与差异性&quot;">​</a></h1><h3 id="相似性" tabindex="-1">相似性 <a class="header-anchor" href="#相似性" aria-label="Permalink to &quot;相似性&quot;">​</a></h3><ol><li><strong>组件化开发</strong>：两者都采用组件化架构，支持构建可复用的 UI 组件</li><li><strong>虚拟 DOM</strong>：都使用虚拟 DOM 来提高渲染性能</li><li><strong>响应式数据</strong>：都实现了数据驱动视图的响应式更新机制</li><li><strong>生态系统</strong>：都有丰富的生态系统和社区支持</li><li><strong>单文件组件</strong>：都支持将模板、逻辑和样式放在一个文件中（React 的 JSX 和 Vue 的 .vue 文件）</li><li><strong>CLI 工具</strong>：都有官方脚手架工具（create-react-app 和 vue-cli）</li></ol><h3 id="差异性" tabindex="-1">差异性 <a class="header-anchor" href="#差异性" aria-label="Permalink to &quot;差异性&quot;">​</a></h3><h4 id="_1-设计理念" tabindex="-1">1. 设计理念 <a class="header-anchor" href="#_1-设计理念" aria-label="Permalink to &quot;1. 设计理念&quot;">​</a></h4><ul><li><strong>React</strong>：专注于 UI 渲染的库，主张&quot;单向数据流&quot;，其他功能通过生态系统扩展</li><li><strong>Vue</strong>：渐进式框架，提供更多开箱即用的功能（如路由、状态管理等）</li></ul><h4 id="_2-模板-vs-jsx" tabindex="-1">2. 模板 vs JSX <a class="header-anchor" href="#_2-模板-vs-jsx" aria-label="Permalink to &quot;2. 模板 vs JSX&quot;">​</a></h4><ul><li><p><strong>React</strong>：使用 JSX（JavaScript XML），将 HTML 和 JavaScript 混合编写</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {name}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>Vue</strong>：主要使用基于 HTML 的模板语法，也支持 JSX</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {{ name }}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h4 id="_3-数据绑定" tabindex="-1">3. 数据绑定 <a class="header-anchor" href="#_3-数据绑定" aria-label="Permalink to &quot;3. 数据绑定&quot;">​</a></h4><ul><li><p><strong>React</strong>：单向数据绑定，通过 setState 或 useState 显式更新状态</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{name} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.value)} /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>Vue</strong>：双向数据绑定（v-model 指令）</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="_4-状态管理" tabindex="-1">4. 状态管理 <a class="header-anchor" href="#_4-状态管理" aria-label="Permalink to &quot;4. 状态管理&quot;">​</a></h4><ul><li><strong>React</strong>：需要第三方库（如 Redux、MobX）或 Context API + useReducer</li><li><strong>Vue</strong>：内置 Vuex（官方状态管理库），Vue 3 引入了 Composition API 的响应式系统</li></ul><h4 id="_5-样式处理" tabindex="-1">5. 样式处理 <a class="header-anchor" href="#_5-样式处理" aria-label="Permalink to &quot;5. 样式处理&quot;">​</a></h4><ul><li><strong>React</strong>：通常使用 CSS-in-JS 方案（如 styled-components）或 CSS Modules</li><li><strong>Vue</strong>：原生支持 scoped CSS 和 CSS Modules</li></ul><h4 id="_6-学习曲线" tabindex="-1">6. 学习曲线 <a class="header-anchor" href="#_6-学习曲线" aria-label="Permalink to &quot;6. 学习曲线&quot;">​</a></h4><ul><li><strong>React</strong>：概念较少但需要理解 JavaScript 较深（如 this 绑定、Hooks 规则）</li><li><strong>Vue</strong>：API 较多但模板语法对新手更友好</li></ul><h4 id="_7-性能优化" tabindex="-1">7. 性能优化 <a class="header-anchor" href="#_7-性能优化" aria-label="Permalink to &quot;7. 性能优化&quot;">​</a></h4><ul><li><strong>React</strong>：手动优化（React.memo、useMemo、useCallback）</li><li><strong>Vue</strong>：自动追踪依赖关系，组件级响应式更新</li></ul><h4 id="_8-最新特性对比" tabindex="-1">8. 最新特性对比 <a class="header-anchor" href="#_8-最新特性对比" aria-label="Permalink to &quot;8. 最新特性对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>React (18+)</th><th>Vue (3.x)</th></tr></thead><tbody><tr><td>组合式 API</td><td>Hooks</td><td>Composition API</td></tr><tr><td>异步渲染</td><td>Concurrent Mode</td><td>Suspense</td></tr><tr><td>全局状态</td><td>Context API</td><td>provide/inject</td></tr><tr><td>代码分割</td><td>React.lazy</td><td>defineAsyncComponent</td></tr></tbody></table><h2 id="_5、react-的核心功能" tabindex="-1">5、React 的核心功能 <a class="header-anchor" href="#_5、react-的核心功能" aria-label="Permalink to &quot;5、React 的核心功能&quot;">​</a></h2><p>React 是一个用于构建用户界面的 JavaScript 库，主要提供以下核心功能：</p><h3 id="_1、-声明式-ui-开发" tabindex="-1">1、 声明式 UI 开发 <a class="header-anchor" href="#_1、-声明式-ui-开发" aria-label="Permalink to &quot;1、 声明式 UI 开发&quot;">​</a></h3><ul><li><strong>描述 UI 应该是什么样子</strong>，而不是如何实现（imperative）</li><li>通过 JSX 语法直观地描述界面结构</li><li>数据变化时自动高效更新 DOM</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明式示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {name}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、-组件化架构" tabindex="-1">2、 组件化架构 <a class="header-anchor" href="#_2、-组件化架构" aria-label="Permalink to &quot;2、 组件化架构&quot;">​</a></h3><ul><li><strong>可复用组件</strong>：将 UI 拆分为独立、可复用的组件</li><li><strong>组合模式</strong>：通过组件嵌套构建复杂界面</li><li><strong>隔离性</strong>：每个组件管理自己的状态和逻辑</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MainContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3、-虚拟-dom-virtual-dom" tabindex="-1">3、 虚拟 DOM (Virtual DOM) <a class="header-anchor" href="#_3、-虚拟-dom-virtual-dom" aria-label="Permalink to &quot;3、 虚拟 DOM (Virtual DOM)&quot;">​</a></h3><ul><li><strong>高效渲染</strong>：通过虚拟 DOM 最小化实际 DOM 操作</li><li><strong>差异算法 (Diffing Algorithm)</strong>：智能计算最小更新集</li><li><strong>批量更新</strong>：合并多个状态更新为单次渲染</li></ul><h3 id="_4、-单向数据流" tabindex="-1">4、 单向数据流 <a class="header-anchor" href="#_4、-单向数据流" aria-label="Permalink to &quot;4、 单向数据流&quot;">​</a></h3><ul><li><strong>自上而下的数据流</strong>：父组件通过 props 向子组件传递数据</li><li><strong>状态提升</strong>：共享状态提升到最近的共同祖先组件</li><li><strong>明确的数据流向</strong>：使应用行为更可预测</li></ul><h3 id="_5、-状态管理" tabindex="-1">5、 状态管理 <a class="header-anchor" href="#_5、-状态管理" aria-label="Permalink to &quot;5、 状态管理&quot;">​</a></h3><ul><li><strong>组件状态 (useState/this.state)</strong>：管理组件内部状态</li><li><strong>Context API</strong>：跨组件层级共享数据</li><li><strong>与 Redux/MobX 集成</strong>：支持复杂状态管理方案</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Clicked {count} times</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_6、-副作用处理-effects" tabindex="-1">6、 副作用处理 (Effects) <a class="header-anchor" href="#_6、-副作用处理-effects" aria-label="Permalink to &quot;6、 副作用处理 (Effects)&quot;">​</a></h3><ul><li><strong>useEffect Hook</strong>：处理数据获取、订阅等副作用</li><li><strong>生命周期控制</strong>：替代类组件的生命周期方法</li><li><strong>清理机制</strong>：防止内存泄漏</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subscription.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清理函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, []);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_7、-跨平台能力" tabindex="-1">7、 跨平台能力 <a class="header-anchor" href="#_7、-跨平台能力" aria-label="Permalink to &quot;7、 跨平台能力&quot;">​</a></h3><ul><li><strong>React DOM</strong>：用于 Web 开发</li><li><strong>React Native</strong>：构建原生移动应用</li><li><strong>React 360</strong>：VR/AR 应用开发</li><li><strong>Electron 集成</strong>：开发桌面应用</li></ul><h3 id="_8、-丰富的生态系统" tabindex="-1">8、 丰富的生态系统 <a class="header-anchor" href="#_8、-丰富的生态系统" aria-label="Permalink to &quot;8、 丰富的生态系统&quot;">​</a></h3><ul><li><strong>路由</strong>：React Router</li><li><strong>状态管理</strong>：Redux, MobX, Recoil</li><li><strong>UI 库</strong>：Material-UI, Ant Design</li><li><strong>服务端渲染</strong>：Next.js</li><li><strong>静态站点</strong>：Gatsby</li></ul><h3 id="_9、-性能优化工具" tabindex="-1">9、 性能优化工具 <a class="header-anchor" href="#_9、-性能优化工具" aria-label="Permalink to &quot;9、 性能优化工具&quot;">​</a></h3><ul><li><strong>React.memo</strong>：组件记忆化</li><li><strong>useMemo/useCallback</strong>：值/函数记忆化</li><li><strong>Profiler API</strong>：性能检测</li><li><strong>并发模式 (Concurrent Mode)</strong>：非阻塞渲染</li></ul><h3 id="_10、-类型支持" tabindex="-1">10、 类型支持 <a class="header-anchor" href="#_10、-类型支持" aria-label="Permalink to &quot;10、 类型支持&quot;">​</a></h3><ul><li><strong>PropTypes</strong>：运行时类型检查</li><li><strong>TypeScript 集成</strong>：优秀的类型支持</li><li><strong>Flow 支持</strong>：Facebook 的类型检查器</li></ul><p>React 的核心设计目标是让开发者能够高效地构建可维护的大型应用，其功能设计始终围绕&quot;组件化&quot;和&quot;声明式&quot;这两个核心理念展开。通过虚拟 DOM 和高效的差异算法，React 在保持开发体验的同时提供了优秀的性能表现。</p><h2 id="_6、如何理解react-state不可变性原则" tabindex="-1">6、如何理解React State不可变性原则 <a class="header-anchor" href="#_6、如何理解react-state不可变性原则" aria-label="Permalink to &quot;6、如何理解React State不可变性原则&quot;">​</a></h2><p>React 中的状态不可变性(Immutability)是一个核心概念，指的是不应该直接修改 state 的值，而是应该创建新的对象或数组来替换旧的状态。</p><h3 id="_1、为什么需要保持-state-不可变" tabindex="-1">1、为什么需要保持 State 不可变？ <a class="header-anchor" href="#_1、为什么需要保持-state-不可变" aria-label="Permalink to &quot;1、为什么需要保持 State 不可变？&quot;">​</a></h3><ol><li><p><strong>性能优化</strong>：</p><ul><li>React 使用浅比较(shallow comparison)来检测状态变化</li><li>直接修改现有对象会导致引用不变，React 无法检测到变化</li><li>不可变更新确保每次状态变化都生成新引用</li></ul></li><li><p><strong>可预测性</strong>：</p><ul><li>保持状态不可变使应用行为更可预测</li><li>避免共享引用导致的意外副作用</li></ul></li><li><p><strong>时间旅行调试</strong>：</p><ul><li>支持保存和恢复历史状态</li><li>是 Redux 等状态管理库的基础</li></ul></li></ol><h3 id="_2、不可变更新的正确方式" tabindex="-1">2、不可变更新的正确方式 <a class="header-anchor" href="#_2、不可变更新的正确方式" aria-label="Permalink to &quot;2、不可变更新的正确方式&quot;">​</a></h3><h4 id="_1-基本类型-无需特殊处理" tabindex="-1">1. 基本类型（无需特殊处理） <a class="header-anchor" href="#_1-基本类型-无需特殊处理" aria-label="Permalink to &quot;1. 基本类型（无需特殊处理）&quot;">​</a></h4><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接修改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-对象" tabindex="-1">2. 对象 <a class="header-anchor" href="#_2-对象" aria-label="Permalink to &quot;2. 对象&quot;">​</a></h4><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确 - 创建新对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误 - 直接修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会触发重新渲染</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-数组" tabindex="-1">3. 数组 <a class="header-anchor" href="#_3-数组" aria-label="Permalink to &quot;3. 数组&quot;">​</a></h4><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加元素 - 正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除元素 - 正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新元素 - 正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误 - 直接修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会触发重新渲染</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_3、深层嵌套结构的更新" tabindex="-1">3、深层嵌套结构的更新 <a class="header-anchor" href="#_3、深层嵌套结构的更新" aria-label="Permalink to &quot;3、深层嵌套结构的更新&quot;">​</a></h3><p>对于复杂状态，可以使用以下方法：</p><ol><li><strong>展开运算符 + 手动合并</strong>：</li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  profile: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.profile,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    address: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New Address&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li><strong>使用 Immer 等库</strong>：</li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> produce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;immer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  draft.profile.address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;New Address&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Immer 会帮你处理不可变更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li><strong>结构化工具函数</strong>：</li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateNestedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [path]: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state[path],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4、react-如何检测状态变化" tabindex="-1">4、React 如何检测状态变化？ <a class="header-anchor" href="#_4、react-如何检测状态变化" aria-label="Permalink to &quot;4、React 如何检测状态变化？&quot;">​</a></h3><p>React 使用 <code>Object.is</code> 比较算法进行浅比较：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prevState, nextState);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>直接修改现有对象会导致：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newObj.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, newObj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true - React 认为没有变化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5、性能考虑" tabindex="-1">5、性能考虑 <a class="header-anchor" href="#_5、性能考虑" aria-label="Permalink to &quot;5、性能考虑&quot;">​</a></h3><ol><li><p><strong>避免过度创建新对象</strong>：</p><ul><li>对于大型对象/数组，创建副本可能有性能开销</li><li>在性能关键路径考虑使用 Immutable.js 等专门库</li></ul></li><li><p><strong>useState vs useReducer</strong>：</p><ul><li>复杂状态逻辑更适合使用 useReducer</li><li>Reducer 天然适合不可变更新模式</li></ul></li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (action.type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_6、常见误区" tabindex="-1">6、常见误区 <a class="header-anchor" href="#_6、常见误区" aria-label="Permalink to &quot;6、常见误区&quot;">​</a></h3><ol><li><p><strong>认为 const 保证不可变性</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合法 - const 只防止重新赋值，不防止属性修改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>错误使用数组方法</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这些方法会修改原数组：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">push, pop, shift, unshift, splice, sort, reverse</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这些方法返回新数组：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">concat, filter, map, slice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>深度克隆不必要</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不推荐 - 深度克隆成本高且不必要</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><p>保持 state 不可变是 React 高效工作的基础，遵循这一原则可以避免许多难以追踪的 bug，并使你的应用更容易维护和优化。</p><h2 id="_7、react的特点和关键版本区别" tabindex="-1">7、React的特点和关键版本区别 <a class="header-anchor" href="#_7、react的特点和关键版本区别" aria-label="Permalink to &quot;7、React的特点和关键版本区别&quot;">​</a></h2><h3 id="_1、react-的核心特点" tabindex="-1">1、React 的核心特点 <a class="header-anchor" href="#_1、react-的核心特点" aria-label="Permalink to &quot;1、React 的核心特点&quot;">​</a></h3><ol><li><p><strong>声明式编程</strong>：</p><ul><li>开发者只需描述 UI 应该是什么样子</li><li>React 负责处理 DOM 更新</li></ul></li><li><p><strong>组件化架构</strong>：</p><ul><li>构建可复用、独立的 UI 组件</li><li>组合式开发模式</li></ul></li><li><p><strong>虚拟 DOM</strong>：</p><ul><li>内存中的轻量级 DOM 表示</li><li>高效的差异算法 (diffing algorithm)</li></ul></li><li><p><strong>单向数据流</strong>：</p><ul><li>数据自上而下通过 props 传递</li><li>状态提升机制</li></ul></li><li><p><strong>跨平台能力</strong>：</p><ul><li>React DOM (Web)</li><li>React Native (移动端)</li><li>React 360 (VR)</li></ul></li><li><p><strong>丰富的生态系统</strong>：</p><ul><li>官方支持的路由、状态管理方案</li><li>庞大的第三方库生态</li></ul></li></ol><h3 id="_2、react-关键版本演进与区别" tabindex="-1">2、React 关键版本演进与区别 <a class="header-anchor" href="#_2、react-关键版本演进与区别" aria-label="Permalink to &quot;2、React 关键版本演进与区别&quot;">​</a></h3><h4 id="_1-react-14-2015" tabindex="-1">1. React 14 (2015) <a class="header-anchor" href="#_1-react-14-2015" aria-label="Permalink to &quot;1. React 14 (2015)&quot;">​</a></h4><ul><li><strong>分离 React 和 React DOM</strong></li><li><strong>引入无状态函数组件</strong></li><li><strong>支持 refs 回调</strong></li></ul><h4 id="_2-react-15-2016" tabindex="-1">2. React 15 (2016) <a class="header-anchor" href="#_2-react-15-2016" aria-label="Permalink to &quot;2. React 15 (2016)&quot;">​</a></h4><ul><li><strong>重写核心算法</strong> (Stack Reconciler)</li><li><strong>改进错误处理</strong> (更清晰的错误消息)</li><li><strong>支持自定义 DOM 属性</strong></li></ul><h4 id="_3-react-16-2017-fiber-架构" tabindex="-1">3. React 16 (2017) - &quot;Fiber&quot; 架构 <a class="header-anchor" href="#_3-react-16-2017-fiber-架构" aria-label="Permalink to &quot;3. React 16 (2017) - &quot;Fiber&quot; 架构&quot;">​</a></h4><ul><li><strong>完全重写核心架构</strong> (Fiber Reconciler)</li><li><strong>新增特性</strong>： <ul><li>Fragments (&lt;&gt; &lt;/&gt;)</li><li>Error Boundaries</li><li>Portals</li><li>自定义 DOM 属性</li><li>改进的服务器端渲染</li></ul></li><li><strong>性能大幅提升</strong></li><li><strong>减小包体积</strong></li></ul><h4 id="_4-react-16-3-2018" tabindex="-1">4. React 16.3 (2018) <a class="header-anchor" href="#_4-react-16-3-2018" aria-label="Permalink to &quot;4. React 16.3 (2018)&quot;">​</a></h4><ul><li><strong>新的生命周期方法</strong>： <ul><li><code>getDerivedStateFromProps</code></li><li><code>getSnapshotBeforeUpdate</code></li></ul></li><li><strong>正式引入 Context API</strong></li><li><strong>创建 Refs 的新方式</strong> (<code>React.createRef</code>)</li></ul><h4 id="_5-react-16-8-2019-hooks-革命" tabindex="-1">5. React 16.8 (2019) - Hooks 革命 <a class="header-anchor" href="#_5-react-16-8-2019-hooks-革命" aria-label="Permalink to &quot;5. React 16.8 (2019) - Hooks 革命&quot;">​</a></h4><ul><li><strong>引入 Hooks</strong>： <ul><li><code>useState</code>, <code>useEffect</code> 等</li><li>允许函数组件使用状态和生命周期</li></ul></li><li><strong>新增 Hook 规则</strong>： <ul><li>只能在函数组件顶层调用</li><li>不能在条件或循环中使用</li></ul></li></ul><h4 id="_6-react-17-2020-过渡版本" tabindex="-1">6. React 17 (2020) - &quot;过渡版本&quot; <a class="header-anchor" href="#_6-react-17-2020-过渡版本" aria-label="Permalink to &quot;6. React 17 (2020) - &quot;过渡版本&quot;&quot;">​</a></h4><ul><li><strong>无新特性</strong>，专注升级平滑性</li><li><strong>新的 JSX 转换</strong> (无需显式导入 React)</li><li><strong>事件委托变更</strong> (不再附加到 document)</li><li><strong>为未来版本铺路</strong></li></ul><h4 id="_7-react-18-2022-并发特性" tabindex="-1">7. React 18 (2022) - 并发特性 <a class="header-anchor" href="#_7-react-18-2022-并发特性" aria-label="Permalink to &quot;7. React 18 (2022) - 并发特性&quot;">​</a></h4><ul><li><strong>自动批处理</strong> (Automatic Batching)</li><li><strong>并发渲染</strong> (Concurrent Rendering)</li><li><strong>新 API</strong>： <ul><li><code>startTransition</code></li><li><code>useId</code></li><li><code>useSyncExternalStore</code></li><li><code>useInsertionEffect</code></li></ul></li><li><strong>改进的 Suspense</strong>： <ul><li>支持服务器端渲染</li><li>更好的加载状态处理</li></ul></li></ul><h3 id="_3、版本对比表" tabindex="-1">3、版本对比表 <a class="header-anchor" href="#_3、版本对比表" aria-label="Permalink to &quot;3、版本对比表&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性/版本</th><th>15及之前</th><th>16.x</th><th>17</th><th>18</th></tr></thead><tbody><tr><td><strong>架构</strong></td><td>Stack Reconciler</td><td>Fiber Reconciler</td><td>Fiber优化</td><td>并发模式</td></tr><tr><td><strong>组件类型</strong></td><td>主要是类组件</td><td>类组件+函数组件</td><td>函数组件兴起</td><td>函数组件主流</td></tr><tr><td><strong>状态管理</strong></td><td>this.setState</td><td>Hooks引入</td><td>Hooks成熟</td><td>并发安全Hooks</td></tr><tr><td><strong>生命周期</strong></td><td>传统生命周期</td><td>新生命周期+废弃警告</td><td>逐步淘汰旧生命周期</td><td>专注Hooks</td></tr><tr><td><strong>SSR</strong></td><td>基础支持</td><td>改进支持</td><td>稳定</td><td>Suspense SSR</td></tr><tr><td><strong>性能</strong></td><td>中等</td><td>显著提升</td><td>进一步优化</td><td>并发渲染优势</td></tr></tbody></table><h3 id="_4、现代-react-开发趋势" tabindex="-1">4、现代 React 开发趋势 <a class="header-anchor" href="#_4、现代-react-开发趋势" aria-label="Permalink to &quot;4、现代 React 开发趋势&quot;">​</a></h3><ol><li><strong>函数组件主导</strong>：Hooks 已成为主流开发模式</li><li><strong>类组件逐步淘汰</strong>：新项目很少使用类组件</li><li><strong>并发特性采用</strong>：React 18 特性逐渐被采用</li><li><strong>服务器组件兴起</strong>：Next.js 等框架推动的演进</li><li><strong>编译优化</strong>：React Forget (未来自动记忆化)</li></ol><p>React 的版本演进体现了从&quot;视图库&quot;到&quot;全功能框架&quot;的转变，每个主要版本都解决了特定问题并引入了新的开发范式。理解这些差异有助于选择适合项目需求的版本和开发方式。</p>`,173)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
